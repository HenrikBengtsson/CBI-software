help([[
Java Tweaks: Adjust Java Settings for the Current Compute Environment
]])

local name = myModuleName()
local version = myModuleVersion()
version = string.gsub(version, "^[.]", "")

whatis("Version: " .. version)
whatis("Keywords: java, settings")
whatis([[
Description: This hidden environment module, tweaks the `JDK_JAVA_OPTIONS` environment variable to improve how Java runs on the current machine. Specifically, it address the problem that Java does _not_ respect environment variable `TMPDIR`, which is set to a local `/scratch` folder on our HPC environment.  To fix this, this module adds `-Djava.io.tmpdir=$TMPDIR` to `JDK_JAVA_OPTIONS` making Java to also use that.  Without this, Java uses the tiny local `/tmp` folder for temporary files with the result that `/tmp` quickly fills up, especially on multi-user machines, causing processes to fail and the machine to become unusable.  Because environment variable `JDK_JAVA_OPTIONS` is not recognized by older versions of Java, for Java 1.8, `JAVA_TOOLS_OPTIONS` is set, and for Java 1.6 `_JAVA_OPTIONS` is set. 
Examples: `echo "JDK_JAVA_OPTIONS='${JDK_JAVA_OPTIONS}'"` or if Java 1.8, `echo "JAVA_TOOLS_OPTIONS='${JAVA_TOOLS_OPTIONS}'"`.
]])

if mode() == "load" then
  -- Make Java respect TMPDIR, if set
  local tmpdir=os.getenv("TMPDIR") or ""
  if tmpdir ~= "" then
    if not isDir(tmpdir) then
      LmodError("Environment variable TMPDIR specifies a non-existing folder: " .. tmpdir)
    end

    local envvar="JDK_JAVA_OPTIONS"
    local bfr = capture("java -version 2>&1")
    if string.match(bfr, "1.8.") then
       envvar="JAVA_TOOL_OPTIONS"
    elseif string.match(bfr, "1.6.") then
       envvar="_JAVA_OPTIONS"
    end

    -- Set -Djava.io.tmpdir=..., if not already set
    local opts=os.getenv(envvar)
    if opts ~= nil and not string.find(opts, "-Djava[.]io[.]tmpdir=") then
      opts = nil
    end
    
    if opts == nil then
      local value="-Djava.io.tmpdir=" .. tmpdir
      prepend_path(envvar, value, " ")
      setenv("_CBI_JAVA_TWEAKS_", value)
      setenv("_CBI_JAVA_TWEAKS_ENVVAR_", envvar)
    end
  end
elseif mode() == "unload" then
  local envvar=os.getenv("_CBI_JAVA_TWEAKS_ENVVAR_")
  local tweaks=os.getenv("_CBI_JAVA_TWEAKS_")
  if envvar ~= nul and tweaks ~= nul then
    local tmpdir=os.getenv("TMPDIR") or ""
    if tmpdir ~= "" then
      remove_path(envvar, tweaks, " ")
      -- Remove _CBI_JAVA_TWEAKS_ and _CBI_JAVA_TWEAKS_ENVVAR_
      pushenv("_CBI_JAVA_TWEAKS_", false)
      pushenv("_CBI_JAVA_TWEAKS_ENVVAR_", false)
      -- Assert unset
      tweaked=os.getenv("_CBI_JAVA_TWEAKS_")
      if tweaked ~= nul then
        LmodError("Failed to unset _CBI_JAVA_TWEAKS_")
      end
      tweaked=os.getenv("_CBI_JAVA_TWEAKS_ENVVAR_")
      if tweaked ~= nul then
        LmodError("Failed to unset _CBI_JAVA_TWEAKS_ENVVAR_")
      end
    end
  end
end
