help([[
Java Tweaks: Adjust Java Settings for the Current Compute Environment
]])

local name = myModuleName()
local version = myModuleVersion()
version = string.gsub(version, "^[.]", "")

whatis("Version: " .. version)
whatis("Keywords: java, settings")
whatis([[
Description: This hidden environment module, tweaks the `_JAVA_OPTIONS` environment variable to improve how Java runs on the current machine. Specifically, it address the problem that Java does _not_ respect environment variable `TMPDIR`, which is set to a local `/scratch` folder on our HPC environment.  To fix this, this module adds `-Djava.io.tmpdir=$TMPDIR` to `_JAVA_OPTIONS` making Java to also use that.  Without this, Java uses the tiny local `/tmp` folder for temporary files with the result that `/tmp` quickly fills up, especially on multi-user machines, causing processes to fail and the machine to become unusable.
Examples: `echo "_JAVA_OPTIONS='${_JAVA_OPTIONS}'"`.
]])

if mode() == "load" then
  -- Make Java respect TMPDIR, if set
  local tmpdir=os.getenv("TMPDIR") or ""
  if tmpdir ~= "" then
    if not isDir(tmpdir) then
      LmodError("Environment variable TMPDIR specifies a non-existing folder: " .. tmpdir)
    end

    -- Set -Djava.io.tmpdir=..., if not already set
    local opts=os.getenv("_JAVA_OPTIONS")
    if opts ~= nil and not string.find(opts, "-Djava[.]io[.]tmpdir=") then
      opts = nil
    end
    if opts == nil then
      local value="-Djava.io.tmpdir=" .. tmpdir
      prepend_path("_JAVA_OPTIONS", value, " ")
      setenv("_JAVA_TWEAKS_", value)
    end
  end
elseif mode() == "unload" then
  local tweaks=os.getenv("_JAVA_TWEAKS_")
  if tweaks ~= nul then
    local tmpdir=os.getenv("TMPDIR") or ""
    if tmpdir ~= "" then
      remove_path("_JAVA_OPTIONS", tweaks, " ")
      tweaked=pushenv("_JAVA_TWEAKS_", false)
      tweaked=os.getenv("_JAVA_TWEAKS_")
      if tweaked ~= nul then
        LmodError("Failed to unset _JAVA_TWEAKS_")
      end
    end
  end
end
