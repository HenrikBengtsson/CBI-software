#' Configure option 'repos' for CRAN and Bioconductor
#'
#' The Bioconductor version is inferred from:
#'
#' 1. Environment variable `R_BIOC_VERSION`
#' 2. `utils::packageVersion("BiocVersion")`
#' 3. `BiocManager::version()`
#' 4. Mapping R version to manually curated version table
#'
#' Options that are set:
#' * `repos`
#'
#' Environment variables that are set:
#' * `R_BIOC_VERSION`
#'
#' @author Henrik Bengtsson
#' @imports utils BiocVersion BiocManager
if (!nzchar(Sys.getenv("R_CMD"))) {
  local({
    known_repos <- function() {
      p <- file.path(Sys.getenv("HOME"), ".R", "repositories")
      if (!file.exists(p)) p <- file.path(R.home("etc"), "repositories")
      ## Find .read_repositories() - moved to 'utils' in R (>= 4.3.0)
      .read_repositories <- NULL
      for (pkg in c("tools", "utils")) {
        ns <- getNamespace(pkg)
        if (exists(".read_repositories", envir = ns, inherits = FALSE)) {
          .read_repositories <- get(".read_repositories", envir = ns, inherits = FALSE)
          break
        }
      }
      ## NOTE: The following gives an error, if 'R_BIOC_VERSION' is not set
      a <- .read_repositories(p)
      repos <- a$URL
      names(repos) <- rownames(a)
      repos
    }
  
    ## Bioconductor version
    bioc_version <- function() {
      biocver <- Sys.getenv("R_BIOC_VERSION")
      if (nzchar(biocver)) return(biocver)
      
      ## Via the BiocVersion package?
      tryCatch({
        biocver <- as.character(utils::packageVersion("BiocVersion")[, 1:2])
      }, error = identity)
      if (nzchar(biocver)) return(biocver)
  
      # Via the BiocManager package?
      ## WORKAROUND: BiocManager::version() can be very slow
      ## because it calls installed.packages().
      ## https://github.com/Bioconductor/BiocManager/pull/42
      tryCatch({
        if (utils::packageVersion("BiocManager") >= "1.30.5") {
          biocver <- as.character(BiocManager::version())
          unloadNamespace("BiocManager")
        } else {
          tryCatch({
            ## WARNING: The following call with query the Bioconductor
            ## web server (https://bioconductor.org/config.yaml) to infer
            ## the recommended Bioconductor version for this version of R
            ## NOTE: If it fails to connect, it will produce warnings
            ## saying so, but will not give an error
            biocver <- as.character(BiocManager:::.version_choose_best())
            unloadNamespace("BiocManager")
            ## Assert valid version, which is not the case if it failed
            ## to query the Bioconductor server. If not, undo.
            if (is.na(package_version(biocver, strict = FALSE))) biocver <- ""
          }, error = identity)
        }
        if (nzchar(biocver)) return(biocver)
      }, error = identity)
  
      # Ad hoc via the R version
      rver <- getRversion()
      biocver <- {
        if (rver >= "4.3.0") "3.17" else ## per 2023-04-26
        if (rver >= "4.2.2") "3.16" else ## per 2022-11-02
        if (rver >= "4.2.0") "3.15" else ## per 2022-04-27
        if (rver >= "4.1.1") "3.14" else ## per 2021-10-27
        if (rver >= "4.1.0") "3.13" else ## per 2020-10-28
        if (rver >= "4.0.3") "3.12" else ## per 2020-10-28
        if (rver >= "4.0.0") "3.11" else ## per 2019-10-30
        if (rver >= "3.6.1") "3.10" else ## per 2019-10-30
        if (rver >= "3.6.0") "3.9" else
        if (rver >= "3.5.1") "3.8" else
        if (rver >= "3.5.0") "3.7" else
        if (rver >= "3.4.2") "3.6" else
        if (rver >= "3.4.0") "3.5" else
        if (rver >= "3.3.1") "3.4" else
        if (rver >= "3.3.0") "3.3" else
        if (rver >= "3.2.2") "3.2" else
        if (rver >= "3.2.0") "3.1" else
                             "3.0"
      }
    } ## bioc_version()

    ## Query Bioconductor version in different ways
    v <- bioc_version()
    biocver <- package_version(v, strict = FALSE)
    if (is.na(biocver)) {
      stop(sprintf("Failed to infer Bioconductor version (from string %s). If set, make sure environment variable 'R_BIOC_VERSION' is set to valid version: %s", sQuote(v), Sys.getenv("R_BIOC_VERSION")))
    }
    Sys.setenv(R_BIOC_VERSION = v)
  
    repos <- c(
      getOption("repos"),
      known_repos(),
      "CRAN"       = "https://cloud.r-project.org",
      "CRANextra"  = if (.Platform$OS.type == "windows") {
                       "https://www.stats.ox.ac.uk/pub/RWin"
                     },
      "R-Forge"    = "http://R-Forge.R-project.org",
      "rforge.net" = "https://www.rforge.net"
    )

    # Drop remaining '@...@' values
    repos <- grep("^@.*@$", repos, invert=TRUE, value=TRUE)
  
    # Drop miscellaneous 
    repos <- repos[!grepl("(CRANextra|R-Forge|rforge.net)", names(repos))]
  
    # Bioconductor tweaks
    if (!is.na(biocver)) {
      if (biocver >= "3.6") {
        repos <- repos[!grepl("BioCextra", names(repos))]
      }
      if (biocver >= "3.7") {
        repos["BioCworkflows"] <- gsub("bioc$", "workflows", repos[["BioCsoft"]])
      }
    }
  
    # Bring CRAN to the front
    idx <- match("CRAN", names(repos))
    if (!is.na(idx)) repos <- c(repos[idx], repos[-idx])
    
    # Use HTTP when HTTPS is not supported
    if (getRversion() < "3.2.2") {
      repos <- gsub("https://", "http://", repos, fixed = TRUE)
    }
  
    # Keep only unique existing ones
    repos <- repos[!is.na(repos)]
    names <- names(repos)
    repos <- repos[!(nzchar(names) & duplicated(names))]
  
    options(repos = repos)
  })
}


#' Tweak option 'repos' to use local CRAN and Bioconductor mirrors
#'
#' Options that are set:
#' * `repos`
#'
#' @author Henrik Bengtsson
local({
  has_internet <- as.logical(toupper(Sys.getenv("R_INTERNET", "FALSE")))
  if (is.na(has_internet)) {
    dev_node <- grepl("dev[0-9]$", Sys.info()[["nodename"]])
    has_internet <- dev_node
  }
  ## Nothing todo?  
  if (has_internet) return()
  
  repos <- getOption("repos")

  ## Local mirrors?
  r_repos_root <- Sys.getenv("R_REPOS_ROOT", NA_character_)

  ## Fall back to known locations
  if (is.na(r_repos_root)) {
    # UCSF Wynton HPC
    if (Sys.getenv("SGE_CLUSTER_NAME") == "wynton_cluster") {
      r_repos_root <- "/wynton/home/cbi/shared/mirrors/r-mirrors"
    }
  }
  
  mirror_root <- suppressWarnings(normalizePath(r_repos_root))
  if (isTRUE(file.info(mirror_root)$isdir)) {
    ## Local CRAN mirror?
    path <- file.path(mirror_root, "cran")
    path <- normalizePath(path)
    if (isTRUE(file.info(path)$isdir)) repos[["CRAN"]] <- sprintf("file://%s", path)
  
    ## Local Bioconductor mirror?
    bioc_root <- file.path(mirror_root, "bioconductor")
    if (isTRUE(file.info(bioc_root)$isdir)) {
    
      ## Set R_BIOC_MIRROR; used by the remotes package
      path <- file.path(bioc_root, "packages")
      if (isTRUE(file.info(path)$isdir)) Sys.setenv(R_BIOC_MIRROR = path)
      
      bioc_ver <- Sys.getenv("R_BIOC_VERSION")
      path <- file.path(bioc_root, bioc_ver, "bioc")
      if (isTRUE(file.info(path)$isdir)) repos[["BioCsoft"]] <- sprintf("file://%s", path)

      path <- file.path(bioc_root, bioc_ver, "data", "annotation")
      if (isTRUE(file.info(path)$isdir)) repos[["BioCann"]] <- sprintf("file://%s", path)

      path <- file.path(bioc_root, bioc_ver, "data", "experiment")
      if (isTRUE(file.info(path)$isdir)) repos[["BioCexp"]] <- sprintf("file://%s", path)
      
      path <- file.path(bioc_root, bioc_ver, "workflows")
      if (isTRUE(file.info(path)$isdir)) repos[["BioCworkflows"]] <- sprintf("file://%s", path)
    }
  }  

  ## AD HOC WORKAROUND / HACK: revdepcheck will throw an error (because of warn=2)
  ## if some package repositories cannot be accessed.  Because of this we will point
  ## all https:// repositories to our local CRAN.
  drop <- grepl("^http[s]?://", repos)
  repos <- repos[!drop]

  options(repos = repos)

  ## Set 'ICUDT_DIR' for when installing the 'stringi' package
  path <- Sys.getenv("ICUDT_DIR", NA_character_)
  if (is.na(path)) {
    path <- file.path(r_repos_root, "misc", "icu55", "data")
    if (isTRUE(file.info(path)$isdir)) Sys.setenv(ICUDT_DIR = path)
  }
})
