#' Configure option 'repos' for CRAN and Bioconductor
#'
#' Options that are set:
#' * `repos`
#'
#' Environment variables that are set:
#' * `R_BIOC_VERSION`
#'
#' @author Henrik Bengtsson
#' @imports utils BiocVersion BiocManager startup
local({
  known_repos <- function() {
    p <- file.path(Sys.getenv("HOME"), ".R", "repositories")
    if (!file.exists(p)) p <- file.path(R.home("etc"), "repositories")
    ns <- getNamespace("tools")
    .read_repositories <- get(".read_repositories", envir = ns)
    a <- .read_repositories(p)
    repos <- a$URL
    names(repos) <- rownames(a)
    repos
  }

  ## Bioconductor version
  bioc_version <- function() {
    biocver <- Sys.getenv("R_BIOC_VERSION")
    if (nzchar(biocver)) return(biocver)
    
    ## Via the BiocVersion package?
    tryCatch({
      biocver <- as.character(utils::packageVersion("BiocVersion")[, 1:2])
    }, error = identity)
    if (nzchar(biocver)) return(biocver)

    # Via the BiocManager package?
    ## WORKAROUND: BiocManager::version() can be very slow
    ## because it calls installed.packages().
    ## https://github.com/Bioconductor/BiocManager/pull/42
    tryCatch({
      biocver <- as.character(BiocManager:::.version_choose_best())
      unloadNamespace("BiocManager")
    }, error = identity)
    if (nzchar(biocver)) return(biocver)

    # Ad hoc via the R version
    rver <- getRversion()
    biocver <- {
      if (rver >= "3.6.0") "3.9" else
      if (rver >= "3.5.1") "3.8" else
      if (rver >= "3.5.0") "3.7" else
      if (rver >= "3.4.2") "3.6" else
      if (rver >= "3.4.0") "3.5" else
      if (rver >= "3.3.1") "3.4" else
      if (rver >= "3.3.0") "3.3" else
      if (rver >= "3.2.2") "3.2" else
      if (rver >= "3.2.0") "3.1" else
                           "3.0"
    }
  }

  Sys.setenv(R_BIOC_VERSION = bioc_version())
  biocver <- package_version(Sys.getenv("R_BIOC_VERSION"))

  repos <- c(
    CRAN = "https://cloud.r-project.org",
    CRANextra = if (.Platform$OS.type == "windows") {
      "https://www.stats.ox.ac.uk/pub/RWin"
    },
    "R-Forge" = "http://R-Forge.R-project.org",
    Omegahat = "http://www.omegahat.org/R",
    known_repos(),
    getOption("repos")
  )
  
  # Drop some
  repos <- repos[!grepl("(Omegahat|R-Forge|rforge.net)", names(repos))]

  # Drop R-Forge
  repos <- repos[!grepl("R-Forge", names(repos))]

  # Bioconductor tweaks
  if (biocver >= "3.6") {
    repos <- repos[!grepl("BioCextra", names(repos))]
  }
  if (biocver >= "3.7") {
    repos["BioCworkflows"] <- gsub("bioc$", "workflows", repos[["BioCsoft"]])
  }

  # Use HTTP when HTTPS is not supported
  if (getRversion() < "3.2.2" || startup::sysinfo()$wine) {
    repos <- gsub("https://", "http://", repos, fixed = TRUE)
  }

  # Keep only unique existing ones
  repos <- repos[!is.na(repos)]
  names <- names(repos)
  repos <- repos[!(nzchar(names) & duplicated(names))]

  options(repos = repos)
})


#' Tweak option 'repos' to use local CRAN and Bioconductor mirrors
#'
#' Options that are set:
#' * `repos`
#'
#' @author Henrik Bengtsson
local({
  has_internet <- as.logical(toupper(Sys.getenv("R_INTERNET", "FALSE")))
  if (is.na(has_internet)) {
    dev_node <- grepl(".*-dev[0-9]$", Sys.info()[["nodename"]])
    has_internet <- dev_node
  }
  ## Nothing todo?  
  if (has_internet) return()
  
  repos <- getOption("repos")

  ## Local mirrors?
  r_repos_root <- Sys.getenv("R_REPOS_ROOT", "/wynton/home/cbi/shared/mirrors/r-mirrors")
  mirror_root <- normalizePath(r_repos_root)
  if (isTRUE(file.info(mirror_root)$isdir)) {
    ## Local CRAN mirror?
    path <- file.path(mirror_root, "cran")
    path <- normalizePath(path)
    if (isTRUE(file.info(path)$isdir)) repos[["CRAN"]] <- sprintf("file://%s", path)
  
    ## Local Bioconductor mirror?
    bioc_root <- file.path(mirror_root, "bioconductor")
    if (isTRUE(file.info(bioc_root)$isdir)) {
    
      ## Set R_BIOC_MIRROR; used by the remotes package
      path <- file.path(bioc_root, "packages")
      if (isTRUE(file.info(path)$isdir)) Sys.setenv(R_BIOC_MIRROR = path)
      
      bioc_ver <- Sys.getenv("R_BIOC_VERSION")
      path <- file.path(bioc_root, bioc_ver, "bioc")
      if (isTRUE(file.info(path)$isdir)) repos[["BioCsoft"]] <- sprintf("file://%s", path)

      path <- file.path(bioc_root, bioc_ver, "data", "annotation")
      if (isTRUE(file.info(path)$isdir)) repos[["BioCann"]] <- sprintf("file://%s", path)

      path <- file.path(bioc_root, bioc_ver, "data", "experiment")
      if (isTRUE(file.info(path)$isdir)) repos[["BioCexp"]] <- sprintf("file://%s", path)
      
      path <- file.path(bioc_root, bioc_ver, "workflows")
      if (isTRUE(file.info(path)$isdir)) repos[["BioCworkflows"]] <- sprintf("file://%s", path)
    }
  }  

  ## AD HOC WORKAROUND / HACK: revdepcheck will throw an error (because of warn=2)
  ## if some package repositories cannot be accessed.  Because of this we will point
  ## all https:// repositories to our local CRAN.
  drop <- grepl("^http[s]?://", repos)
  repos <- repos[!drop]

  options(repos = repos)
})
