help([[
R: The R Programming Language
]])

local name = myModuleName()
local version = myModuleVersion()
whatis("Version: " .. version)
whatis("Keywords: Programming, Statistics")
whatis("URL: https://www.r-project.org/")
whatis("Description: The R programming language. Examples: `R --version` and `Rscript --version`.")

local name = "R"
local root = os.getenv("SOFTWARE_ROOT_CBI")
local home = pathJoin(root, name .. "-" .. version)

prepend_path("PATH", pathJoin(home, "bin"))
prepend_path("MANPATH", pathJoin(home, "share", "man"))

-- A custom installed R may not be compatible with R from the Linux distro
-- TODO: Enable this /HB 2019-08-14
-- setenv("R_LIBS_USER","~/R/%p-library/%v-CBI")

if version == "3.6.0" then
  setenv("R_INSTALL_STAGED", "false")
end

-- In-house env var for local CRAN mirror
setenv("R_LOCAL_CRAN", "file://" .. pathJoin(os.getenv("CBI_SHARED_ROOT"), "mirrors", "r-mirrors", "cran"))

-- R packages built from native code and installed using R from EPEL is *not*
-- always compatible with ditto installed using R from the CBI software stack.
-- Because of this, we will use R_LIBS_USER specific to the CBI stack.
-- However, since some users has already installed to the built-in R_LIBS_USER
-- we will not change this for such users.  The heuristic is to check if the
-- built-in R_LIBS_USER folder already exists. If not, then it's safe to use
-- one specific to the CBI stack.
local r_libs_user = capture("R_LIBS_USER= Rscript -e \"cat(normalizePath(Sys.getenv('R_LIBS_USER'), mustWork=FALSE))\"")
if (not isDir(r_libs_user)) then
  setenv("R_LIBS_USER", r_libs_user .. "-CBI")
end
