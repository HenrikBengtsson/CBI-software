help([[
R: The R Programming Language
]])

local name = myModuleName()
local version = myModuleVersion()
version = string.gsub(version, "^[.]", "") -- for hidden modules
whatis("Version: " .. version)
whatis("Keywords: Programming, Statistics")
whatis("URL: https://www.r-project.org/, https://cran.r-project.org/doc/manuals/r-release/NEWS.html (changelog)")
whatis([[
Description: The R programming language.
Examples: `R`, `R --version`, and `Rscript --version`.
]])

has_devtoolset = function(version)
  local path = pathJoin("/opt", "rh", "devtoolset-" .. version)
  return(isDir(path))
end

local name = "R"
local root = os.getenv("SOFTWARE_ROOT_CBI")

-- Specific to the Linux distribution?
if string.match(myFileName(), "/_" .. os.getenv("CBI_LINUX") .. "/") then
  root = pathJoin(root, "_" .. os.getenv("CBI_LINUX"))
end

local home = pathJoin(root, name .. "-" .. version)

prepend_path("PATH", pathJoin(home, "bin"))

local path = pathJoin(home, "lib")
if not isDir(path) then
  path = pathJoin(home, "lib64")
end
prepend_path("LD_LIBRARY_PATH", pathJoin(path, "R", "lib"))
prepend_path("MANPATH", pathJoin(home, "share", "man"))

local v = version
v = string.gsub(v, "-.*", "")

-- WORKAROUND: R 3.6.0 is not compatible with BeeGFS
if v == "3.6.0" then
  pushenv("R_INSTALL_STAGED", "false")
else
  pushenv("R_INSTALL_STAGED", "true")
end

local r_libs_user
if os.getenv("CBI_LINUX") == "centos7" then
  r_libs_user="~/R/%p-library/%v-CBI"
else
  r_libs_user="~/R/" .. os.getenv("CBI_LINUX") .. "-" .. "%p-library/%v-CBI"
end

if (v >= "4.1.0") then
  local gv = string.gsub(version, v, "")
  gv = string.gsub(gv, "-alpha", "")
  gv = string.gsub(gv, "-beta", "")
  gv = string.gsub(gv, "-rc", "")
  gv = string.gsub(gv, "-gcc", "")
  gv = tonumber(gv)
  if (gv > 4) then
    r_libs_user = r_libs_user .. "-gcc" .. gv
    if has_devtoolset(gv) then
      depends_on("scl-devtoolset/" .. gv)
    end
  end
end

-- Avoid R CMD build warning on "invalid uid value replaced by that for user 'nobody'"
-- https://stackoverflow.com/questions/30599326
pushenv("R_BUILD_TAR", "tar")

-- In-house env var for R repositories mirrored locally
local r_repos_root = os.getenv("CBI_SHARED_ROOT")
if (r_repos_root) then
  LmodMessage("r_repos_root=" .. r_repos_root)
  r_repos_root = pathJoin(r_repos_root, "mirrors", "r-mirrors")
  pushenv("R_REPOS_ROOT", r_repos_root)
  pushenv("R_REPOS_CRAN", "file://" .. pathJoin(r_repos_root, "cran"))
  pushenv("R_LOCAL_CRAN", "file://" .. pathJoin(r_repos_root, "cran"))
end

-- R packages built from native code and installed using R from EPEL is *not*
-- always compatible with ditto installed using R from the CBI software stack.
-- Because of this, we will use R_LIBS_USER specific to the CBI stack.
-- However, since some users has already installed to the built-in R_LIBS_USER
-- we will not change this for such users.  The heuristic is to check if the
-- built-in R_LIBS_USER folder already exists. If not, then it's safe to use
-- one specific to the CBI stack.
pushenv("R_LIBS_USER", r_libs_user)

-- WORKAROUND: utils::download.file(), which is for instance used by install.packages()
-- have a built-in timeout at 60 seconds.  This might be too short for some larger
-- Bioconductor annotation packages, e.g.
--  * 'SNPlocs.Hsapiens.dbSNP150.GRCh38' (2.10 GB)
--  * 'MafDb.gnomAD.r2.1.GRCh38' (6.04 GB) => 6 GB/10 min = 600 MB/min = 10 MB/s = 80 Mb/s
-- Use 20 minutes timeout instead of 1 minute, i.e. enought with 40 Mb/s for a 6 GB file
pushenv("R_DEFAULT_INTERNET_TIMEOUT", "1200")

-- WORKAROUND: gert 1.1.0 (2021-01-25) installs toward a static libgit2 that
-- gives 'Illegal instruction' on some hosts (with older CPUs?)
-- See https://github.com/r-lib/gert/issues/117
pushenv("USE_SYSTEM_LIBGIT2", "true")

-- WORKAROUND: Package udunits2 does not install out of the box and requires
-- manually specifying 'configure.args' during install unless we set the
-- following environment variable
local path = "/usr/include/udunits2"
if (isDir(path)) then
  pushenv("UDUNITS2_INCLUDE", path)
end

-- WORKAROUND: nloptr 2.0.0 requires CMake (>= 3.15)
-- See https://github.com/astamm/nloptr/issues/104#issuecomment-1111498876
pushenv("CMAKE_BIN", "cmake3")



-- Assert that there is no active Conda environment
assert_no_conda_environment = function()  
  local conda_env = os.getenv("CONDA_DEFAULT_ENV")
  if conda_env ~= nil then
    local action = os.getenv("CBI_ON_CONDA") or "warning"
    local msg = "Using the " .. "'" .. myModuleName() .. "'" .. " module when a Conda environment is active risks resulting in hard-to-troubleshoot errors due to library conflicts. Make sure to deactivate the currently active Conda " .. "'" .. conda_env .. "'" .. " environment before loading this module, e.g. 'conda deactivate'."
    if action == "error" then
      LmodError(msg)
    elseif action == "warning" then
      LmodWarning(msg)
    end
  end
end


-- Protect against a conflicting Conda stack
if (mode() == "load") then
  assert_no_conda_environment()
end
